# -*- coding: utf-8 -*-
"""eQTL_expression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nJlRUS9f9aFc-HpLKtAPD-OSHVS1Elcl

This notebook generates Figure 2c in the Sei framework manuscript, showing that regulatory sequence-class-level variant effects are predictive of directional GTEx variant gene expression effects.
"""

from google.colab import drive
drive.mount('/content/drive')

from collections import defaultdict
import glob
import os

import numpy as np
import pandas as pd
from scipy.stats import spearmanr
from statsmodels.stats.multitest import multipletests

import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns

plt.style.use('seaborn-white')

mpl.rcParams['axes.spines.right'] = False
mpl.rcParams['axes.spines.top'] = False
mpl.rcParams['pdf.fonttype'] = 42
mpl.rcParams['ps.fonttype'] = 42
mpl.rc('xtick', labelsize=24)
mpl.rc('ytick', labelsize=24)
mpl.rc('axes', titlesize=24)
mpl.rc('legend', fontsize=18)

"""We downloaded and processed the [GTEx v8 data](https://storage.googleapis.com/gtex_analysis_v8/single_tissue_qtl_data/GTEx_Analysis_v8_eQTL.tar) and [GENCODE transcript .gtf file](https://storage.googleapis.com/gtex_analysis_v8/reference/gencode.v26.GRCh38.genes.gtf) used in the GTEx analyses. Set the data filepaths accordingly:"""

GTEX_DATA_DIR = '/content/drive/MyDrive/BimaProject/Modig1/Test3/GTEx_Analysis_v8_eQTL'
GENCODE_GTF = '/content/drive/MyDrive/BimaProject/Modig1/Test3/gencode.v26.annotation.gtf'
SEI_DIR = '/content/drive/MyDrive/BimaProject'

SC_NAMES_FILE = os.path.join(RESOURCES_DIR, 'cnames.tsv')
df = pd.read_csv(SC_NAMES_FILE, sep='\t')
df.head()
MAPPING = {}
for row in df.itertuples():
    MAPPING[row.index] = '{0} {1}'.format(row.ID, row.name)

ensg_gene_coordinates = {}
with open(GENCODE_GTF, 'r') as fh:
    for line in fh:
        if '##' in line:
            continue
        cols = line.strip().split('\t')
        coordinates = (cols[0], int(cols[3]), int(cols[4]))
        ensg_id = cols[8].split(';')[0].split(' ')[1][1:-1]
        ensg_gene_coordinates[ensg_id] = coordinates

"""Collect all eQTLs and their effect sizes (slope) for a tissue +/- `N_FROM_TSS` of any gene. Note these next 3 cells will take a few minutes to run."""

#Not
N_FROM_TSS = 5000
tissue_variants_near_tss = defaultdict(list)
for fp in glob.glob(os.path.join(GTEX_DATA_DIR, '*variant_gene_pairs.txt.gz')):
    tissue = os.path.basename(fp).split('.')[0]
    print('Processing {0}'.format(tissue))
    df = pd.read_csv(fp, sep='\t')
    for v, g in zip(df['variant_id'].tolist(), df['gene_id'].tolist()):
        gchrom, gpos, _ = ensg_gene_coordinates[g]
        cols = v.split('_')
        chrom = cols[0]
        pos = int(cols[1])
        if pos >= gpos - N_FROM_TSS and pos <= gpos + N_FROM_TSS:
            record = {'chrom': chrom,
                      'pos': pos,
                      'ref': cols[2],
                      'alt': cols[3],
                      'gene': g}
            tissue_variants_near_tss[tissue].append(record)

# Save to TSV file
output_filepath = '/content/drive/MyDrive/BimaProject/Modig1/Test3/file.tsv'  # Provide the desired output file path
with open(output_filepath, 'w') as file:
    # Write header
    file.write("chrom\tpos\tref\talt\tgene\n")

    # Write data
    for tissue, records in tissue_variants_near_tss.items():
        for record in records:
            file.write("\t".join([str(record[key]) for key in ['chrom', 'pos', 'ref', 'alt', 'gene']]) + "\n")

# Load the Sei_data.xlsx file
sei_data_filepath = '/content/drive/MyDrive/BimaProject/Modig1/Test3/Sei data.xlsx'  # Provide the path to your Sei_data.xlsx file
sei_data_df = pd.read_excel(sei_data_filepath, sheet_name='sorted Filtered sequence_class_')

# Load the previously generated file.tsv
file_tsv_filepath = '/content/drive/MyDrive/BimaProject/Modig1/Test3/file.tsv'  # Provide the path to your file.tsv
file_tsv_df = pd.read_csv(file_tsv_filepath, sep='\t')

# Merge the two dataframes based on chromosome, position, reference allele, and alternate allele
merged_df = pd.merge(sei_data_df, file_tsv_df, on=['chrom', 'pos', 'ref', 'alt'], how='inner')

# Drop duplicates based on the specified columns
merged_df = merged_df.drop_duplicates(subset=['chrom', 'pos', 'ref', 'alt', 'gene'])

# Save the matching variants to a new output TSV file
output_matched_filepath = '/content/drive/MyDrive/BimaProject/Modig1/Test3/matched_file.tsv'  # Provide the desired path for the output file
merged_df.to_csv(output_matched_filepath, sep='\t', index=False, columns=['chrom', 'pos', 'ref', 'alt', 'gene'])


